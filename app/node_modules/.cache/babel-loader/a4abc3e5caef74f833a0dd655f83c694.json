{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Evan_\\\\stream-dolby-voxeet\\\\src\\\\containers\\\\AuthedRoute.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect, Route } from 'react-router-dom'; // Screens //\n\nimport LoadingScreen from 'screens/LoadingScreen'; // Redux //\n\nimport { createStructuredSelector } from 'reselect';\nimport { makeSelectIsAuthed } from 'data/auth/selectors';\n\nconst AuthedRoute = ({\n  component: Component,\n  isAuthed,\n  loading,\n  queueSnackbar,\n  ...rest\n}) => {\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    render: props => {\n      if (loading) {\n        return /*#__PURE__*/React.createElement(LoadingScreen, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 28\n          }\n        });\n      }\n\n      if (!isAuthed) {\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: {\n            pathname: '/',\n            state: {\n              conferenceAlias: props.match.params.conferenceAlias\n            }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 25\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 24\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst mapStateToProps = createStructuredSelector({\n  isAuthed: makeSelectIsAuthed()\n});\nexport default connect(mapStateToProps)(AuthedRoute);","map":{"version":3,"sources":["C:/Users/Evan_/stream-dolby-voxeet/src/containers/AuthedRoute.js"],"names":["React","connect","Redirect","Route","LoadingScreen","createStructuredSelector","makeSelectIsAuthed","AuthedRoute","component","Component","isAuthed","loading","queueSnackbar","rest","props","pathname","state","conferenceAlias","match","params","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC,C,CAEA;;AACA,OAAOC,aAAP,MAA0B,uBAA1B,C,CAEA;;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,kBAAT,QAAmC,qBAAnC;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwBC,EAAAA,QAAxB;AAAkCC,EAAAA,OAAlC;AAA2CC,EAAAA,aAA3C;AAA0D,KAAGC;AAA7D,CAAD,KAAyE;AACzF,sBACI,oBAAC,KAAD,oBACQA,IADR;AAEI,IAAA,MAAM,EAAGC,KAAD,IAAW;AACf,UAAIH,OAAJ,EAAa;AACT,4BAAO,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;AAED,UAAI,CAACD,QAAL,EAAe;AACX,4BACI,oBAAC,QAAD;AACI,UAAA,EAAE,EAAE;AACAK,YAAAA,QAAQ,EAAE,GADV;AAEAC,YAAAA,KAAK,EAAE;AAAEC,cAAAA,eAAe,EAAEH,KAAK,CAACI,KAAN,CAAYC,MAAZ,CAAmBF;AAAtC;AAFP,WADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;AACD,0BAAO,oBAAC,SAAD,oBAAeH,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACH,KAlBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAsBH,CAvBD;;AAyBA,MAAMM,eAAe,GAAGf,wBAAwB,CAAC;AAC7CK,EAAAA,QAAQ,EAAEJ,kBAAkB;AADiB,CAAD,CAAhD;AAIA,eAAeL,OAAO,CAACmB,eAAD,CAAP,CAAyBb,WAAzB,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\n// Screens //\r\nimport LoadingScreen from 'screens/LoadingScreen';\r\n\r\n// Redux //\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { makeSelectIsAuthed } from 'data/auth/selectors';\r\n\r\nconst AuthedRoute = ({ component: Component, isAuthed, loading, queueSnackbar, ...rest }) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => {\r\n                if (loading) {\r\n                    return <LoadingScreen />;\r\n                }\r\n\r\n                if (!isAuthed) {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: '/',\r\n                                state: { conferenceAlias: props.match.params.conferenceAlias },\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n                return <Component {...props} />;\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    isAuthed: makeSelectIsAuthed(),\r\n});\r\n\r\nexport default connect(mapStateToProps)(AuthedRoute);\r\n"]},"metadata":{},"sourceType":"module"}