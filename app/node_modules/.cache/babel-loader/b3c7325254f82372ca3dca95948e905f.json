{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Evan_\\\\stream-dolby-voxeet\\\\src\\\\screens\\\\Conference\\\\containers\\\\AttendeesChat\\\\AttendeesChat.js\";\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { StreamChat } from 'stream-chat';\nimport { Chat, Channel, Window, Thread, MessageList, MessageInput, Message } from 'stream-chat-react';\nimport { withRouter } from 'react-router-dom';\nimport Animated from 'animated/lib/targets/react-dom';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux'; // Redux //\n\nimport { toggleAttendeesChat, setUnreadCount } from 'data/chat/actions';\nimport { createStructuredSelector } from 'reselect';\nimport { makeSelectCurrentUser, makeSelectStreamToken } from 'data/auth/selectors'; // Components //\n\nimport Portal from 'utils/Portal';\nimport ChatHeader from './ChatHeader';\nconst Root = styled(Animated.div)`\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 100;\n    max-width: 376px;\n    width: 100%;\n    background-color: ${({\n  theme\n}) => theme.color.trueblack};\n`;\n\nclass AttendeesChat extends Component {\n  constructor(props) {\n    super(props);\n    this.anim = new Animated.Value(0);\n\n    this.handleNewMessage = async () => {\n      const {\n        attendeesChatOpened,\n        setUnreadCount\n      } = this.props;\n      const {\n        channel\n      } = this.state;\n      const unread = await channel.countUnread();\n      setUnreadCount(attendeesChatOpened ? 0 : unread);\n    };\n\n    this.chatClient = new StreamChat(process.env.REACT_APP_STREAM_KEY);\n    this.state = {\n      channel: null,\n      unmount: true\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      match,\n      user,\n      streamToken\n    } = this.props;\n    await this.chatClient.setUser(user, streamToken);\n    const channel = await this.chatClient.channel('messaging', match.params.conferenceAlias, {\n      name: 'Video Call'\n    });\n    await this.setState({\n      channel\n    });\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    const {\n      attendeesChatOpened,\n      setUnreadCount\n    } = this.props;\n    const {\n      channel\n    } = this.state;\n\n    if (!prevState.channel && channel) {\n      this.init();\n    }\n\n    if (!prevProps.attendeesChatOpened && attendeesChatOpened) {\n      await this.setState({\n        unmount: false\n      });\n      setUnreadCount(0);\n      document.body.classList.add('chat-open');\n      Animated.timing(this.anim, {\n        toValue: 1,\n        duration: 250\n      }).start();\n    } else if (prevProps.attendeesChatOpened && !attendeesChatOpened) {\n      document.body.classList.remove('chat-open');\n      Animated.timing(this.anim, {\n        toValue: 0,\n        duration: 250\n      }).start(() => {\n        this.setState({\n          unmount: true\n        });\n      });\n    }\n  }\n\n  async init() {\n    const {\n      channel\n    } = this.state;\n    await channel.watch();\n    channel.on('message.new', this.handleNewMessage);\n  }\n\n  get rootStyle() {\n    return {\n      transform: [{\n        translateX: this.anim.interpolate({\n          inputRange: [0, 1],\n          outputRange: ['100%', '0%']\n        })\n      }]\n    };\n  }\n\n  render() {\n    const {\n      toggleAttendeesChat\n    } = this.props;\n    const {\n      channel,\n      unmount\n    } = this.state;\n\n    if (!channel || unmount) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(Portal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Root, {\n      style: this.rootStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Chat, {\n      client: this.chatClient,\n      theme: \"messaging dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Channel, {\n      channel: channel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Window, {\n      hideOnThread: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ChatHeader, {\n      onClose: toggleAttendeesChat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(MessageList, {\n      Message: this.renderMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(MessageInput, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Thread, {\n      Message: Message,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  user: makeSelectCurrentUser(),\n  streamToken: makeSelectStreamToken()\n});\nexport default compose(connect(mapStateToProps, {\n  toggleAttendeesChat,\n  setUnreadCount\n}), withRouter)(AttendeesChat);","map":{"version":3,"sources":["C:/Users/Evan_/stream-dolby-voxeet/src/screens/Conference/containers/AttendeesChat/AttendeesChat.js"],"names":["React","Component","styled","StreamChat","Chat","Channel","Window","Thread","MessageList","MessageInput","Message","withRouter","Animated","compose","connect","toggleAttendeesChat","setUnreadCount","createStructuredSelector","makeSelectCurrentUser","makeSelectStreamToken","Portal","ChatHeader","Root","div","theme","color","trueblack","AttendeesChat","constructor","props","anim","Value","handleNewMessage","attendeesChatOpened","channel","state","unread","countUnread","chatClient","process","env","REACT_APP_STREAM_KEY","unmount","componentDidMount","match","user","streamToken","setUser","params","conferenceAlias","name","setState","componentDidUpdate","prevProps","prevState","init","document","body","classList","add","timing","toValue","duration","start","remove","watch","on","rootStyle","transform","translateX","interpolate","inputRange","outputRange","render","renderMessage","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport { StreamChat } from 'stream-chat';\r\nimport { Chat, Channel, Window, Thread, MessageList, MessageInput, Message } from 'stream-chat-react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Animated from 'animated/lib/targets/react-dom';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\n// Redux //\r\nimport { toggleAttendeesChat, setUnreadCount } from 'data/chat/actions';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { makeSelectCurrentUser, makeSelectStreamToken } from 'data/auth/selectors';\r\n\r\n// Components //\r\nimport Portal from 'utils/Portal';\r\nimport ChatHeader from './ChatHeader';\r\n\r\nconst Root = styled(Animated.div)`\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    z-index: 100;\r\n    max-width: 376px;\r\n    width: 100%;\r\n    background-color: ${({ theme }) => theme.color.trueblack};\r\n`;\r\n\r\nclass AttendeesChat extends Component {\r\n    anim = new Animated.Value(0);\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.chatClient = new StreamChat(process.env.REACT_APP_STREAM_KEY);\r\n        this.state = {\r\n            channel: null,\r\n            unmount: true,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const { match, user, streamToken } = this.props;\r\n\r\n        await this.chatClient.setUser(user, streamToken);\r\n        const channel = await this.chatClient.channel('messaging', match.params.conferenceAlias, {\r\n            name: 'Video Call',\r\n        });\r\n\r\n        await this.setState({\r\n            channel,\r\n        });\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState) {\r\n        const { attendeesChatOpened, setUnreadCount } = this.props;\r\n        const { channel } = this.state;\r\n\r\n        if (!prevState.channel && channel) {\r\n            this.init();\r\n        }\r\n\r\n        if (!prevProps.attendeesChatOpened && attendeesChatOpened) {\r\n            await this.setState({ unmount: false });\r\n            setUnreadCount(0);\r\n            document.body.classList.add('chat-open');\r\n            Animated.timing(this.anim, {\r\n                toValue: 1,\r\n                duration: 250,\r\n            }).start();\r\n        } else if (prevProps.attendeesChatOpened && !attendeesChatOpened) {\r\n            document.body.classList.remove('chat-open');\r\n            Animated.timing(this.anim, {\r\n                toValue: 0,\r\n                duration: 250,\r\n            }).start(() => {\r\n                this.setState({\r\n                    unmount: true,\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    async init() {\r\n        const { channel } = this.state;\r\n        await channel.watch();\r\n\r\n        channel.on('message.new', this.handleNewMessage);\r\n    }\r\n\r\n    handleNewMessage = async () => {\r\n        const { attendeesChatOpened, setUnreadCount } = this.props;\r\n        const { channel } = this.state;\r\n        const unread = await channel.countUnread();\r\n        setUnreadCount(attendeesChatOpened ? 0 : unread);\r\n    };\r\n\r\n    get rootStyle() {\r\n        return {\r\n            transform: [\r\n                {\r\n                    translateX: this.anim.interpolate({\r\n                        inputRange: [0, 1],\r\n                        outputRange: ['100%', '0%'],\r\n                    }),\r\n                },\r\n            ],\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { toggleAttendeesChat } = this.props;\r\n        const { channel, unmount } = this.state;\r\n        if (!channel || unmount) {\r\n            return null;\r\n        }\r\n        return (\r\n            <Portal>\r\n                <Root style={this.rootStyle}>\r\n                    <Chat client={this.chatClient} theme='messaging dark'>\r\n                        <Channel channel={channel}>\r\n                            <Window hideOnThread>\r\n                                <ChatHeader onClose={toggleAttendeesChat} />\r\n                                <MessageList Message={this.renderMessage} />\r\n                                <MessageInput />\r\n                            </Window>\r\n                            <Thread Message={Message} fullWidth />\r\n                        </Channel>\r\n                    </Chat>\r\n                </Root>\r\n            </Portal>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: makeSelectCurrentUser(),\r\n    streamToken: makeSelectStreamToken(),\r\n});\r\n\r\nexport default compose(\r\n    connect(\r\n        mapStateToProps,\r\n        { toggleAttendeesChat, setUnreadCount },\r\n    ),\r\n    withRouter,\r\n)(AttendeesChat);\r\n"]},"metadata":{},"sourceType":"module"}