{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types'; // Utils //\n\nfunction getContainer(container, defaultContainer) {\n  container = typeof container === 'function' ? container() : container;\n  return ReactDOM.findDOMNode(container) || defaultContainer;\n}\n/**\r\n * Portals provide a first-class way to render children into a DOM node\r\n * that exists outside the DOM hierarchy of the parent component.\r\n */\n\n\nclass Portal extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getMountNode = () => {\n      return this.mountNode;\n    };\n  }\n\n  componentDidMount() {\n    this.setMountNode(this.props.container); // Only rerender if needed\n\n    if (!this.props.disable) {\n      this.forceUpdate(this.props.onRendered);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.container !== this.props.container || prevProps.disable !== this.props.disable) {\n      this.setMountNode(this.props.container); // Only rerender if needed\n\n      if (!this.props.disable) {\n        this.forceUpdate(this.props.onRendered);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.mountNode = null;\n  }\n\n  setMountNode(container) {\n    if (this.props.disable) {\n      this.mountNode = ReactDOM.findDOMNode(this).parentElement;\n      return;\n    }\n\n    this.mountNode = getContainer(container, document.body);\n  }\n\n  render() {\n    const {\n      children,\n      disable,\n      unmount\n    } = this.props;\n\n    if (unmount) {\n      return null;\n    }\n\n    if (disable) {\n      return children;\n    }\n\n    return this.mountNode ? ReactDOM.createPortal(children, this.mountNode) : null;\n  }\n\n}\n\nPortal.propTypes = {\n  children: PropTypes.node.isRequired,\n  container: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  disable: PropTypes.bool,\n  onRendered: PropTypes.func,\n  unmount: PropTypes.bool\n};\nPortal.defaultProps = {\n  disable: false\n};\nexport default Portal;","map":{"version":3,"sources":["C:/Users/Evan_/stream-dolby-voxeet/src/utils/Portal.js"],"names":["React","ReactDOM","PropTypes","getContainer","container","defaultContainer","findDOMNode","Portal","Component","getMountNode","mountNode","componentDidMount","setMountNode","props","disable","forceUpdate","onRendered","componentDidUpdate","prevProps","componentWillUnmount","parentElement","document","body","render","children","unmount","createPortal","propTypes","node","isRequired","oneOfType","object","func","bool","defaultProps"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AAEA,SAASC,YAAT,CAAsBC,SAAtB,EAAiCC,gBAAjC,EAAmD;AAC/CD,EAAAA,SAAS,GAAG,OAAOA,SAAP,KAAqB,UAArB,GAAkCA,SAAS,EAA3C,GAAgDA,SAA5D;AACA,SAAOH,QAAQ,CAACK,WAAT,CAAqBF,SAArB,KAAmCC,gBAA1C;AACH;AAED;;;;;;AAIA,MAAME,MAAN,SAAqBP,KAAK,CAACQ,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SAkCjCC,YAlCiC,GAkClB,MAAM;AACjB,aAAO,KAAKC,SAAZ;AACH,KApCgC;AAAA;;AACjCC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,YAAL,CAAkB,KAAKC,KAAL,CAAWT,SAA7B,EADgB,CAGhB;;AACA,QAAI,CAAC,KAAKS,KAAL,CAAWC,OAAhB,EAAyB;AACrB,WAAKC,WAAL,CAAiB,KAAKF,KAAL,CAAWG,UAA5B;AACH;AACJ;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC1B,QAAIA,SAAS,CAACd,SAAV,KAAwB,KAAKS,KAAL,CAAWT,SAAnC,IAAgDc,SAAS,CAACJ,OAAV,KAAsB,KAAKD,KAAL,CAAWC,OAArF,EAA8F;AAC1F,WAAKF,YAAL,CAAkB,KAAKC,KAAL,CAAWT,SAA7B,EAD0F,CAG1F;;AACA,UAAI,CAAC,KAAKS,KAAL,CAAWC,OAAhB,EAAyB;AACrB,aAAKC,WAAL,CAAiB,KAAKF,KAAL,CAAWG,UAA5B;AACH;AACJ;AACJ;;AAEDG,EAAAA,oBAAoB,GAAG;AACnB,SAAKT,SAAL,GAAiB,IAAjB;AACH;;AAEDE,EAAAA,YAAY,CAACR,SAAD,EAAY;AACpB,QAAI,KAAKS,KAAL,CAAWC,OAAf,EAAwB;AACpB,WAAKJ,SAAL,GAAiBT,QAAQ,CAACK,WAAT,CAAqB,IAArB,EAA2Bc,aAA5C;AACA;AACH;;AAED,SAAKV,SAAL,GAAiBP,YAAY,CAACC,SAAD,EAAYiB,QAAQ,CAACC,IAArB,CAA7B;AACH;;AAMDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,QAAF;AAAYV,MAAAA,OAAZ;AAAqBW,MAAAA;AAArB,QAAiC,KAAKZ,KAA5C;;AAEA,QAAIY,OAAJ,EAAa;AACT,aAAO,IAAP;AACH;;AAED,QAAIX,OAAJ,EAAa;AACT,aAAOU,QAAP;AACH;;AAED,WAAO,KAAKd,SAAL,GAAiBT,QAAQ,CAACyB,YAAT,CAAsBF,QAAtB,EAAgC,KAAKd,SAArC,CAAjB,GAAmE,IAA1E;AACH;;AAlDgC;;AAqDrCH,MAAM,CAACoB,SAAP,GAAmB;AACfH,EAAAA,QAAQ,EAAEtB,SAAS,CAAC0B,IAAV,CAAeC,UADV;AAEfzB,EAAAA,SAAS,EAAEF,SAAS,CAAC4B,SAAV,CAAoB,CAAC5B,SAAS,CAAC6B,MAAX,EAAmB7B,SAAS,CAAC8B,IAA7B,CAApB,CAFI;AAGflB,EAAAA,OAAO,EAAEZ,SAAS,CAAC+B,IAHJ;AAIfjB,EAAAA,UAAU,EAAEd,SAAS,CAAC8B,IAJP;AAKfP,EAAAA,OAAO,EAAEvB,SAAS,CAAC+B;AALJ,CAAnB;AAQA1B,MAAM,CAAC2B,YAAP,GAAsB;AAClBpB,EAAAA,OAAO,EAAE;AADS,CAAtB;AAIA,eAAeP,MAAf","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Utils //\r\n\r\nfunction getContainer(container, defaultContainer) {\r\n    container = typeof container === 'function' ? container() : container;\r\n    return ReactDOM.findDOMNode(container) || defaultContainer;\r\n}\r\n\r\n/**\r\n * Portals provide a first-class way to render children into a DOM node\r\n * that exists outside the DOM hierarchy of the parent component.\r\n */\r\nclass Portal extends React.Component {\r\n    componentDidMount() {\r\n        this.setMountNode(this.props.container);\r\n\r\n        // Only rerender if needed\r\n        if (!this.props.disable) {\r\n            this.forceUpdate(this.props.onRendered);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.container !== this.props.container || prevProps.disable !== this.props.disable) {\r\n            this.setMountNode(this.props.container);\r\n\r\n            // Only rerender if needed\r\n            if (!this.props.disable) {\r\n                this.forceUpdate(this.props.onRendered);\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.mountNode = null;\r\n    }\r\n\r\n    setMountNode(container) {\r\n        if (this.props.disable) {\r\n            this.mountNode = ReactDOM.findDOMNode(this).parentElement;\r\n            return;\r\n        }\r\n\r\n        this.mountNode = getContainer(container, document.body);\r\n    }\r\n\r\n    getMountNode = () => {\r\n        return this.mountNode;\r\n    };\r\n\r\n    render() {\r\n        const { children, disable, unmount } = this.props;\r\n\r\n        if (unmount) {\r\n            return null;\r\n        }\r\n\r\n        if (disable) {\r\n            return children;\r\n        }\r\n\r\n        return this.mountNode ? ReactDOM.createPortal(children, this.mountNode) : null;\r\n    }\r\n}\r\n\r\nPortal.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n    container: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\r\n    disable: PropTypes.bool,\r\n    onRendered: PropTypes.func,\r\n    unmount: PropTypes.bool,\r\n};\r\n\r\nPortal.defaultProps = {\r\n    disable: false,\r\n};\r\n\r\nexport default Portal;\r\n"]},"metadata":{},"sourceType":"module"}