{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Evan_\\\\stream-dolby-voxeet\\\\src\\\\screens\\\\Conference\\\\Conference.js\";\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { ConferenceRoom } from '@voxeet/react-components';\nimport { connect } from 'react-redux';\nimport voxeet from 'data/voxeet'; // Screens //\n\nimport LoadingScreen from 'screens/LoadingScreen'; // Redux //\n\nimport { createStructuredSelector } from 'reselect';\nimport { makeSelectCurrentUser } from 'data/auth/selectors';\nimport { makeSelectShowModal } from './selectors'; // Assets //\n\nimport StreamLogo from \"assets/stream.svg\"; // Components //\n\nimport Logo from 'components/Logo';\nimport InvitationModal from './components/InvitationModal';\nimport ActionsButtons from './components/ActionsButtons'; // Containers //\n\nimport AttendeesChat from './containers/AttendeesChat';\nconst Header = styled.div`\n    display: none;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    justify-content: center;\n    align-items: center;\n    padding: 24px;\n    z-index: 101;\n    @media (min-width: ${({\n  theme: {\n    breakpoints\n  }\n}) => breakpoints.sm}px) {\n        display: flex;\n    }\n`;\nconst Stream = styled.img`\n    max-width: 48px;\n    margin-left: 40px;\n`;\n\nclass Conference extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showInvitationModal: false\n    };\n\n    this.handleOnConnect = () => {\n      const {\n        showModal\n      } = this.props;\n\n      if (showModal) {\n        this.toggleModal();\n      }\n\n      console.log('Participant connected');\n    };\n\n    this.handleOnLeave = () => {\n      console.log('Participant disconnected');\n      this.props.history.push('/');\n    };\n\n    this.toggleModal = () => {\n      const {\n        showInvitationModal\n      } = this.state;\n      this.setState({\n        showInvitationModal: !showInvitationModal\n      });\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.showModal && !this.props.showModal) {\n      this.toggleModal();\n    }\n  }\n\n  get settings() {\n    const {\n      user\n    } = this.props;\n    let userInfo = {};\n\n    if (user) {\n      userInfo = { ...user,\n        externalId: user.id,\n        avatarUrl: user.image\n      };\n    }\n\n    return {\n      consumerKey: process.env.REACT_APP_VOX_KEY,\n      consumerSecret: process.env.REACT_APP_VOX_SECRET,\n      constraints: {\n        audio: true,\n        video: true\n      },\n      videoRatio: {\n        width: 1920,\n        height: 1080\n      },\n      videoCodec: 'H264',\n      userInfo,\n      sdk: voxeet.instance\n    };\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      showInvitationModal\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Logo, {\n      color: \"white\",\n      size: 32,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Stream, {\n      src: StreamLogo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(ConferenceRoom, Object.assign({\n      loadingScreen: LoadingScreen,\n      actionsButtons: ActionsButtons,\n      attendeesChat: AttendeesChat,\n      isWidget: false,\n      autoJoin: true,\n      kickOnHangUp: true,\n      handleOnLeave: this.handleOnLeave,\n      handleOnConnect: this.handleOnConnect\n    }, this.settings, {\n      conferenceAlias: match.params.conferenceAlias,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(InvitationModal, {\n      open: showInvitationModal,\n      onClose: this.toggleModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  user: makeSelectCurrentUser(),\n  showModal: makeSelectShowModal()\n});\nexport default connect(mapStateToProps)(Conference);","map":{"version":3,"sources":["C:/Users/Evan_/stream-dolby-voxeet/src/screens/Conference/Conference.js"],"names":["React","Component","styled","ConferenceRoom","connect","voxeet","LoadingScreen","createStructuredSelector","makeSelectCurrentUser","makeSelectShowModal","Logo","InvitationModal","ActionsButtons","AttendeesChat","Header","div","theme","breakpoints","sm","Stream","img","Conference","state","showInvitationModal","handleOnConnect","showModal","props","toggleModal","console","log","handleOnLeave","history","push","setState","componentDidUpdate","prevProps","settings","user","userInfo","externalId","id","avatarUrl","image","consumerKey","process","env","REACT_APP_VOX_KEY","consumerSecret","REACT_APP_VOX_SECRET","constraints","audio","video","videoRatio","width","height","videoCodec","sdk","instance","render","match","StreamLogo","params","conferenceAlias","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,aAAnB,C,CAEA;;AACA,OAAOC,aAAP,MAA0B,uBAA1B,C,CAEA;;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,qBAAT,QAAsC,qBAAtC;AACA,SAASC,mBAAT,QAAoC,aAApC,C,CAEA;;4CAGA;;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,cAAP,MAA2B,6BAA3B,C,CAEA;;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AAEA,MAAMC,MAAM,GAAGZ,MAAM,CAACa,GAAI;;;;;;;;;;yBAUD,CAAC;AAAEC,EAAAA,KAAK,EAAE;AAAEC,IAAAA;AAAF;AAAT,CAAD,KAAgCA,WAAW,CAACC,EAAG;;;CAVxE;AAeA,MAAMC,MAAM,GAAGjB,MAAM,CAACkB,GAAI;;;CAA1B;;AAKA,MAAMC,UAAN,SAAyBpB,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAC/BqB,KAD+B,GACvB;AACJC,MAAAA,mBAAmB,EAAE;AADjB,KADuB;;AAAA,SAW/BC,eAX+B,GAWb,MAAM;AACpB,YAAM;AAAEC,QAAAA;AAAF,UAAgB,KAAKC,KAA3B;;AACA,UAAID,SAAJ,EAAe;AACX,aAAKE,WAAL;AACH;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACH,KAjB8B;;AAAA,SAmB/BC,aAnB+B,GAmBf,MAAM;AAClBF,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,WAAKH,KAAL,CAAWK,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACH,KAtB8B;;AAAA,SAsD/BL,WAtD+B,GAsDjB,MAAM;AAChB,YAAM;AAAEJ,QAAAA;AAAF,UAA0B,KAAKD,KAArC;AACA,WAAKW,QAAL,CAAc;AACVV,QAAAA,mBAAmB,EAAE,CAACA;AADZ,OAAd;AAGH,KA3D8B;AAAA;;AAK/BW,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC1B,QAAIA,SAAS,CAACV,SAAV,IAAuB,CAAC,KAAKC,KAAL,CAAWD,SAAvC,EAAkD;AAC9C,WAAKE,WAAL;AACH;AACJ;;AAeD,MAAIS,QAAJ,GAAe;AACX,UAAM;AAAEC,MAAAA;AAAF,QAAW,KAAKX,KAAtB;AAEA,QAAIY,QAAQ,GAAG,EAAf;;AAEA,QAAID,IAAJ,EAAU;AACNC,MAAAA,QAAQ,GAAG,EACP,GAAGD,IADI;AAEPE,QAAAA,UAAU,EAAEF,IAAI,CAACG,EAFV;AAGPC,QAAAA,SAAS,EAAEJ,IAAI,CAACK;AAHT,OAAX;AAKH;;AAED,WAAO;AACHC,MAAAA,WAAW,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBADtB;AAEHC,MAAAA,cAAc,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFzB;AAGHC,MAAAA,WAAW,EAAE;AACTC,QAAAA,KAAK,EAAE,IADE;AAETC,QAAAA,KAAK,EAAE;AAFE,OAHV;AAOHC,MAAAA,UAAU,EAAE;AACRC,QAAAA,KAAK,EAAE,IADC;AAERC,QAAAA,MAAM,EAAE;AAFA,OAPT;AAWHC,MAAAA,UAAU,EAAE,MAXT;AAYHjB,MAAAA,QAZG;AAaHkB,MAAAA,GAAG,EAAEnD,MAAM,CAACoD;AAbT,KAAP;AAeH;;AASDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKjC,KAAvB;AACA,UAAM;AAAEH,MAAAA;AAAF,QAA0B,KAAKD,KAArC;AACA,wBACI,uDACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAC,OAAZ;AAAoB,MAAA,IAAI,EAAE,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEsC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,eAKI,oBAAC,cAAD;AACI,MAAA,aAAa,EAAEtD,aADnB;AAEI,MAAA,cAAc,EAAEM,cAFpB;AAGI,MAAA,aAAa,EAAEC,aAHnB;AAII,MAAA,QAAQ,EAAE,KAJd;AAKI,MAAA,QAAQ,MALZ;AAMI,MAAA,YAAY,MANhB;AAOI,MAAA,aAAa,EAAE,KAAKiB,aAPxB;AAQI,MAAA,eAAe,EAAE,KAAKN;AAR1B,OASQ,KAAKY,QATb;AAUI,MAAA,eAAe,EAAEuB,KAAK,CAACE,MAAN,CAAaC,eAVlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OALJ,eAiBI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEvC,mBAAvB;AAA4C,MAAA,OAAO,EAAE,KAAKI,WAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBJ,CADJ;AAqBH;;AArF8B;;AAwFnC,MAAMoC,eAAe,GAAGxD,wBAAwB,CAAC;AAC7C8B,EAAAA,IAAI,EAAE7B,qBAAqB,EADkB;AAE7CiB,EAAAA,SAAS,EAAEhB,mBAAmB;AAFe,CAAD,CAAhD;AAKA,eAAeL,OAAO,CAAC2D,eAAD,CAAP,CAAyB1C,UAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport { ConferenceRoom } from '@voxeet/react-components';\r\nimport { connect } from 'react-redux';\r\nimport voxeet from 'data/voxeet';\r\n\r\n// Screens //\r\nimport LoadingScreen from 'screens/LoadingScreen';\r\n\r\n// Redux //\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { makeSelectCurrentUser } from 'data/auth/selectors';\r\nimport { makeSelectShowModal } from './selectors';\r\n\r\n// Assets //\r\nimport StreamLogo from 'assets/stream.svg';\r\n\r\n// Components //\r\nimport Logo from 'components/Logo';\r\nimport InvitationModal from './components/InvitationModal';\r\nimport ActionsButtons from './components/ActionsButtons';\r\n\r\n// Containers //\r\nimport AttendeesChat from './containers/AttendeesChat';\r\n\r\nconst Header = styled.div`\r\n    display: none;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 24px;\r\n    z-index: 101;\r\n    @media (min-width: ${({ theme: { breakpoints } }) => breakpoints.sm}px) {\r\n        display: flex;\r\n    }\r\n`;\r\n\r\nconst Stream = styled.img`\r\n    max-width: 48px;\r\n    margin-left: 40px;\r\n`;\r\n\r\nclass Conference extends Component {\r\n    state = {\r\n        showInvitationModal: false,\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.showModal && !this.props.showModal) {\r\n            this.toggleModal();\r\n        }\r\n    }\r\n\r\n    handleOnConnect = () => {\r\n        const { showModal } = this.props;\r\n        if (showModal) {\r\n            this.toggleModal();\r\n        }\r\n        console.log('Participant connected');\r\n    };\r\n\r\n    handleOnLeave = () => {\r\n        console.log('Participant disconnected');\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    get settings() {\r\n        const { user } = this.props;\r\n\r\n        let userInfo = {};\r\n\r\n        if (user) {\r\n            userInfo = {\r\n                ...user,\r\n                externalId: user.id,\r\n                avatarUrl: user.image,\r\n            };\r\n        }\r\n\r\n        return {\r\n            consumerKey: process.env.REACT_APP_VOX_KEY,\r\n            consumerSecret: process.env.REACT_APP_VOX_SECRET,\r\n            constraints: {\r\n                audio: true,\r\n                video: true,\r\n            },\r\n            videoRatio: {\r\n                width: 1920,\r\n                height: 1080,\r\n            },\r\n            videoCodec: 'H264',\r\n            userInfo,\r\n            sdk: voxeet.instance,\r\n        };\r\n    }\r\n\r\n    toggleModal = () => {\r\n        const { showInvitationModal } = this.state;\r\n        this.setState({\r\n            showInvitationModal: !showInvitationModal,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { match } = this.props;\r\n        const { showInvitationModal } = this.state;\r\n        return (\r\n            <>\r\n                <Header>\r\n                    <Logo color='white' size={32} />\r\n                    <Stream src={StreamLogo} />\r\n                </Header>\r\n                <ConferenceRoom\r\n                    loadingScreen={LoadingScreen}\r\n                    actionsButtons={ActionsButtons}\r\n                    attendeesChat={AttendeesChat}\r\n                    isWidget={false}\r\n                    autoJoin\r\n                    kickOnHangUp\r\n                    handleOnLeave={this.handleOnLeave}\r\n                    handleOnConnect={this.handleOnConnect}\r\n                    {...this.settings}\r\n                    conferenceAlias={match.params.conferenceAlias}\r\n                />\r\n                <InvitationModal open={showInvitationModal} onClose={this.toggleModal} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    user: makeSelectCurrentUser(),\r\n    showModal: makeSelectShowModal(),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Conference);\r\n"]},"metadata":{},"sourceType":"module"}