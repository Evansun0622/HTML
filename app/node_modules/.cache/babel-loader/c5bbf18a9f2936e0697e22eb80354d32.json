{"ast":null,"code":"import tinycolor from \"tinycolor2\"; //\n//    Adapted from Material UI v0.x\n//    https://github.com/mui-org/material-ui/tree/v0.x\n//\n\n/**\r\n * Returns a number whose value is limited to the given range.\r\n *\r\n * @param {number} value The value to be clamped\r\n * @param {number} min The lower boundary of the output range\r\n * @param {number} max The upper boundary of the output range\r\n * @returns {number} A number in the range [min, max]\r\n */\n\nfunction clamp(value, min, max) {\n  if (value < min) {\n    return min;\n  }\n\n  if (value > max) {\n    return max;\n  }\n\n  return value;\n}\n/**\r\n * Converts a color object with type and values to a string.\r\n *\r\n * @param {object} color - Decomposed color\r\n * @param {string} color.type - One of, 'rgb', 'rgba', 'hsl', 'hsla'\r\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\r\n * @returns {string} A CSS color string\r\n */\n\n\nexport function convertColorToString(color) {\n  const {\n    type,\n    values\n  } = color;\n\n  if (type.indexOf(\"rgb\") > -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    for (let i = 0; i < 3; i++) {\n      values[i] = parseInt(values[i], 10);\n    }\n  }\n\n  let colorString;\n\n  if (type.indexOf(\"hsl\") > -1) {\n    colorString = `${color.type}(${values[0]}, ${values[1]}%, ${values[2]}%`;\n  } else {\n    colorString = `${color.type}(${values[0]}, ${values[1]}, ${values[2]}`;\n  }\n\n  if (values.length === 4) {\n    colorString += `, ${color.values[3]})`;\n  } else {\n    colorString += \")\";\n  }\n\n  return colorString;\n}\nexport function convertHexToRGBAObj(color) {\n  if (color.length === 4) {\n    let extendedColor = \"#\";\n\n    for (let i = 1; i < color.length; i++) {\n      extendedColor += color.charAt(i) + color.charAt(i);\n    }\n\n    color = extendedColor;\n  }\n\n  return {\n    r: parseInt(color.substr(1, 2), 16),\n    g: parseInt(color.substr(3, 2), 16),\n    b: parseInt(color.substr(5, 2), 16),\n    a: 1\n  };\n}\n/**\r\n * Converts a color from CSS hex format to CSS rgb format.\r\n *\r\n *  @param {string} color - Hex color, i.e. #nnn or #nnnnnn\r\n *  @returns {string} A CSS rgb color string\r\n */\n\nexport function convertHexToRGB(color) {\n  if (color.length === 4) {\n    let extendedColor = \"#\";\n\n    for (let i = 1; i < color.length; i++) {\n      extendedColor += color.charAt(i) + color.charAt(i);\n    }\n\n    color = extendedColor;\n  }\n\n  const values = {\n    r: parseInt(color.substr(1, 2), 16),\n    g: parseInt(color.substr(3, 2), 16),\n    b: parseInt(color.substr(5, 2), 16)\n  };\n  return `rgb(${values.r}, ${values.g}, ${values.b})`;\n}\n/**\r\n * Returns an object with the type and values of a color.\r\n *\r\n * Note: Does not support rgb % values and color names.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {{type: string, values: number[]}} A MUI color object\r\n */\n\nexport function decomposeColor(color) {\n  if (color.charAt(0) === \"#\") {\n    return decomposeColor(convertHexToRGB(color));\n  }\n\n  const marker = color.indexOf(\"(\");\n  const type = color.substring(0, marker);\n  let values = color.substring(marker + 1, color.length - 1).split(\",\");\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values\n  };\n}\n/**\r\n * Calculates the contrast ratio between two colors.\r\n *\r\n * Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\r\n *\r\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {number} A contrast ratio value in the range 0 - 21 with 2 digit precision.\r\n */\n\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  const contrastRatio = (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n  return Number(contrastRatio.toFixed(2)); // Truncate at two digits\n}\n/**\r\n * The relative brightness of any point in a color space,\r\n * normalized to 0 for darkest black and 1 for lightest white.\r\n *\r\n * Formula: https://www.w3.org/WAI/GL/wiki/Relative_luminance\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {number} The relative brightness of the color in the range 0 - 1\r\n */\n\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n\n  if (color.type.indexOf(\"rgb\") > -1) {\n    const rgb = color.values.map(val => {\n      val /= 255; // normalized\n\n      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n    });\n    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3)); // Truncate at 3 digits\n  } else if (color.type.indexOf(\"hsl\") > -1) {\n    return color.values[2] / 100;\n  }\n}\n/**\r\n * Darken or lighten a colour, depending on its luminance.\r\n * Light colors are darkened, dark colors are lightened.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\r\n * Set the absolute transparency of a color.\r\n * Any existing alpha values are overwritten.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} value - value to set the alpha channel to in the range 0 -1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value, 0, 1);\n\n  if (color.type === \"rgb\" || color.type === \"hsl\") {\n    color.type += \"a\";\n  }\n\n  color.values[3] = value;\n  return convertColorToString(color);\n}\n/**\r\n * Darkens a color.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient, 0, 1);\n\n  if (color.type.indexOf(\"hsl\") > -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf(\"rgb\") > -1) {\n    for (let i = 0; i < 3; i++) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return convertColorToString(color);\n}\n/**\r\n * Lightens a color.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient, 0, 1);\n\n  if (color.type.indexOf(\"hsl\") > -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf(\"rgb\") > -1) {\n    for (let i = 0; i < 3; i++) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return convertColorToString(color);\n}\nexport function isValidHex(hex) {\n  const lh = String(hex).charAt(0) === \"#\" ? 1 : 0;\n  return hex.length !== 4 + lh && hex.length < 7 + lh && tinycolor(hex).isValid();\n}","map":{"version":3,"sources":["C:/Users/Evan_/stream-dolby-voxeet/src/styles/colorUtils.js"],"names":["tinycolor","clamp","value","min","max","convertColorToString","color","type","values","indexOf","i","parseInt","colorString","length","convertHexToRGBAObj","extendedColor","charAt","r","substr","g","b","a","convertHexToRGB","decomposeColor","marker","substring","split","map","parseFloat","getContrastRatio","foreground","background","lumA","getLuminance","lumB","contrastRatio","Math","Number","toFixed","rgb","val","pow","emphasize","coefficient","darken","lighten","fade","isValidHex","hex","lh","String","isValid"],"mappings":"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","sourcesContent":["import tinycolor from \"tinycolor2\";\r\n\r\n//\r\n//    Adapted from Material UI v0.x\r\n//    https://github.com/mui-org/material-ui/tree/v0.x\r\n//\r\n\r\n/**\r\n * Returns a number whose value is limited to the given range.\r\n *\r\n * @param {number} value The value to be clamped\r\n * @param {number} min The lower boundary of the output range\r\n * @param {number} max The upper boundary of the output range\r\n * @returns {number} A number in the range [min, max]\r\n */\r\nfunction clamp(value, min, max) {\r\n  if (value < min) {\r\n    return min;\r\n  }\r\n  if (value > max) {\r\n    return max;\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * Converts a color object with type and values to a string.\r\n *\r\n * @param {object} color - Decomposed color\r\n * @param {string} color.type - One of, 'rgb', 'rgba', 'hsl', 'hsla'\r\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\r\n * @returns {string} A CSS color string\r\n */\r\nexport function convertColorToString(color) {\r\n  const { type, values } = color;\r\n\r\n  if (type.indexOf(\"rgb\") > -1) {\r\n    // Only convert the first 3 values to int (i.e. not alpha)\r\n    for (let i = 0; i < 3; i++) {\r\n      values[i] = parseInt(values[i], 10);\r\n    }\r\n  }\r\n\r\n  let colorString;\r\n\r\n  if (type.indexOf(\"hsl\") > -1) {\r\n    colorString = `${color.type}(${values[0]}, ${values[1]}%, ${values[2]}%`;\r\n  } else {\r\n    colorString = `${color.type}(${values[0]}, ${values[1]}, ${values[2]}`;\r\n  }\r\n\r\n  if (values.length === 4) {\r\n    colorString += `, ${color.values[3]})`;\r\n  } else {\r\n    colorString += \")\";\r\n  }\r\n\r\n  return colorString;\r\n}\r\n\r\nexport function convertHexToRGBAObj(color) {\r\n  if (color.length === 4) {\r\n    let extendedColor = \"#\";\r\n    for (let i = 1; i < color.length; i++) {\r\n      extendedColor += color.charAt(i) + color.charAt(i);\r\n    }\r\n    color = extendedColor;\r\n  }\r\n\r\n  return {\r\n    r: parseInt(color.substr(1, 2), 16),\r\n    g: parseInt(color.substr(3, 2), 16),\r\n    b: parseInt(color.substr(5, 2), 16),\r\n    a: 1\r\n  };\r\n}\r\n\r\n/**\r\n * Converts a color from CSS hex format to CSS rgb format.\r\n *\r\n *  @param {string} color - Hex color, i.e. #nnn or #nnnnnn\r\n *  @returns {string} A CSS rgb color string\r\n */\r\nexport function convertHexToRGB(color) {\r\n  if (color.length === 4) {\r\n    let extendedColor = \"#\";\r\n    for (let i = 1; i < color.length; i++) {\r\n      extendedColor += color.charAt(i) + color.charAt(i);\r\n    }\r\n    color = extendedColor;\r\n  }\r\n\r\n  const values = {\r\n    r: parseInt(color.substr(1, 2), 16),\r\n    g: parseInt(color.substr(3, 2), 16),\r\n    b: parseInt(color.substr(5, 2), 16)\r\n  };\r\n\r\n  return `rgb(${values.r}, ${values.g}, ${values.b})`;\r\n}\r\n\r\n/**\r\n * Returns an object with the type and values of a color.\r\n *\r\n * Note: Does not support rgb % values and color names.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {{type: string, values: number[]}} A MUI color object\r\n */\r\nexport function decomposeColor(color) {\r\n  if (color.charAt(0) === \"#\") {\r\n    return decomposeColor(convertHexToRGB(color));\r\n  }\r\n\r\n  const marker = color.indexOf(\"(\");\r\n\r\n  const type = color.substring(0, marker);\r\n  let values = color.substring(marker + 1, color.length - 1).split(\",\");\r\n  values = values.map(value => parseFloat(value));\r\n\r\n  return { type, values };\r\n}\r\n\r\n/**\r\n * Calculates the contrast ratio between two colors.\r\n *\r\n * Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\r\n *\r\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {number} A contrast ratio value in the range 0 - 21 with 2 digit precision.\r\n */\r\nexport function getContrastRatio(foreground, background) {\r\n  const lumA = getLuminance(foreground);\r\n  const lumB = getLuminance(background);\r\n  const contrastRatio =\r\n    (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\r\n\r\n  return Number(contrastRatio.toFixed(2)); // Truncate at two digits\r\n}\r\n\r\n/**\r\n * The relative brightness of any point in a color space,\r\n * normalized to 0 for darkest black and 1 for lightest white.\r\n *\r\n * Formula: https://www.w3.org/WAI/GL/wiki/Relative_luminance\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {number} The relative brightness of the color in the range 0 - 1\r\n */\r\nexport function getLuminance(color) {\r\n  color = decomposeColor(color);\r\n\r\n  if (color.type.indexOf(\"rgb\") > -1) {\r\n    const rgb = color.values.map(val => {\r\n      val /= 255; // normalized\r\n      return val <= 0.03928\r\n        ? val / 12.92\r\n        : Math.pow((val + 0.055) / 1.055, 2.4);\r\n    });\r\n    return Number(\r\n      (0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3)\r\n    ); // Truncate at 3 digits\r\n  } else if (color.type.indexOf(\"hsl\") > -1) {\r\n    return color.values[2] / 100;\r\n  }\r\n}\r\n\r\n/**\r\n * Darken or lighten a colour, depending on its luminance.\r\n * Light colors are darkened, dark colors are lightened.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\nexport function emphasize(color, coefficient = 0.15) {\r\n  return getLuminance(color) > 0.5\r\n    ? darken(color, coefficient)\r\n    : lighten(color, coefficient);\r\n}\r\n\r\n/**\r\n * Set the absolute transparency of a color.\r\n * Any existing alpha values are overwritten.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} value - value to set the alpha channel to in the range 0 -1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\nexport function fade(color, value) {\r\n  color = decomposeColor(color);\r\n  value = clamp(value, 0, 1);\r\n\r\n  if (color.type === \"rgb\" || color.type === \"hsl\") {\r\n    color.type += \"a\";\r\n  }\r\n  color.values[3] = value;\r\n\r\n  return convertColorToString(color);\r\n}\r\n\r\n/**\r\n * Darkens a color.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\nexport function darken(color, coefficient) {\r\n  color = decomposeColor(color);\r\n  coefficient = clamp(coefficient, 0, 1);\r\n\r\n  if (color.type.indexOf(\"hsl\") > -1) {\r\n    color.values[2] *= 1 - coefficient;\r\n  } else if (color.type.indexOf(\"rgb\") > -1) {\r\n    for (let i = 0; i < 3; i++) {\r\n      color.values[i] *= 1 - coefficient;\r\n    }\r\n  }\r\n  return convertColorToString(color);\r\n}\r\n\r\n/**\r\n * Lightens a color.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\nexport function lighten(color, coefficient) {\r\n  color = decomposeColor(color);\r\n  coefficient = clamp(coefficient, 0, 1);\r\n\r\n  if (color.type.indexOf(\"hsl\") > -1) {\r\n    color.values[2] += (100 - color.values[2]) * coefficient;\r\n  } else if (color.type.indexOf(\"rgb\") > -1) {\r\n    for (let i = 0; i < 3; i++) {\r\n      color.values[i] += (255 - color.values[i]) * coefficient;\r\n    }\r\n  }\r\n\r\n  return convertColorToString(color);\r\n}\r\n\r\nexport function isValidHex(hex) {\r\n  const lh = String(hex).charAt(0) === \"#\" ? 1 : 0;\r\n  return (\r\n    hex.length !== 4 + lh && hex.length < 7 + lh && tinycolor(hex).isValid()\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}